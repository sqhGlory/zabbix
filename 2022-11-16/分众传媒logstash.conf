# Sample Logstash configuration for creating a simple
# Beats -> Logstash -> Elasticsearch pipeline.

input {

}

filter {
  if [type] == 'auditbeat' {
    if [source][ip] {
      cidr {
        address => ["%{[source][ip]}"]
        network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128","169.254.0.0/16", "fe80::/10","224.0.0.0/4", "ff00::/8","255.255.255.255/32" ]
        add_field => { "[source][locality]" => "private" }
      }
      if [source][locality] != "private" {
        geoip {
          source => "[source][ip]"
          target => "[source][geo]"
        }
      }
      if [source][locality] == "private" {
	translate {
	  regex => true
	  field => "[source][ip]"
          destination => "source_geo"
	  dictionary_path => "/usr/local/logstash/logstash-7.4.2/config/intranet-location.yml"
	}
        json {
	  source => "source_geo"
          target => "[source][geo]"
	}
	mutate {
          remove_field => ["source_geo"]
        }
      }
    }
    if [destination][ip] {
      cidr {
        address => ["%{[destination][ip]}"]
        network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128","169.254.0.0/16", "fe80::/10","224.0.0.0/4", "ff00::/8","255.255.255.255/32" ]
        add_field => { "[destination][locality]" => "private" }
      }
      if [destination][locality] != "private" {
        geoip {
          source => "[destination][ip]"
          target => "[destination][geo]"
        }
      }
      if [destination][locality] == "private" {
        translate {
          regex => true
          field => "[destination][ip]"
          destination => "destination_geo"
          dictionary_path => "/usr/local/logstash/logstash-7.4.2/config/intranet-location.yml"
        }
        json {
          source => "destination_geo"
          target => "[destination][geo]"
        }
        mutate {
          remove_field => ["destination_geo"]
        }
      }
    }
  }

  if [type] == 'winlogbeat' {
    if [source][ip] {
      cidr {
        address => ["%{[source][ip]}"]
        network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128","169.254.0.0/16", "fe80::/10","224.0.0.0/4", "ff00::/8","255.255.255.255/32" ]
        add_field => { "[source][locality]" => "private" }
      }
    }
  }

  if [type] == "syslog" {
    # 360天擎
    if [host] == "10.216.234.14" {
      mutate {
	gsub => ["message", "<.*>", ""]
      }
      json {
	source => "message"
      }
      translate {
        regex => true
        field => "ip"
        destination => "geo"
        dictionary_path => "/usr/local/logstash/logstash-7.4.2/config/intranet-location.yml"
      }
      json {
        source => "geo"
        target => "[geoip]"
      }
      mutate {
        remove_field => ["geo"]
      }
    }
    # ssl vpn
    if [host] in [ "10.202.7.140", "192.168.7.73" ] {
      grok {
        match => [
		  "message","%{SYSLOG5424PRI}date=%{DATA} time=%{TIME:time} devname=\"%{WORD:devname}\" devid=\"%{WORD:devid}\" logid=\"%{WORD:logid}\" type=\"%{WORD:type}\" subtype=\"%{WORD:subtype}\" level=\"%{WORD:level}\" vd=\"%{DATA:vd}\" eventtime=%{WORD:eventtime} logdesc=\"%{DATA:logdesc}\" action=\"%{DATA:action}\" tunneltype=\"%{DATA:tunneltype}\" tunnelid=%{DATA:tunnelid} remip=%{IPV4:remip} user=\"%{DATA:user}\" group=\"%{DATA:group}\" dst_host=\"%{DATA:dst_host}\" reason=\"%{DATA:reason}\" msg=\"%{DATA:msg}\"",
		  "message","%{SYSLOG5424PRI}date=%{DATA} time=%{TIME:time} devname=\"%{WORD:devname}\" devid=\"%{WORD:devid}\" logid=\"%{WORD:logid}\" type=\"%{WORD:type}\" subtype=\"%{WORD:subtype}\" level=\"%{WORD:level}\" vd=\"%{DATA:vd}\" eventtime=%{WORD:eventtime} srcip=%{IPV4:srcip} srcport=%{DATA:srcport} srcintf=\"%{DATA:srcintf}\" srcintfrole=\"%{DATA:srcintfrole}\" dstip=%{IPV4:dstip} dstport=%{DATA:dstport} dstintf=\"%{DATA:dstintf}\" dstintfrole=\"%{DATA:dstintfrole}\" poluuid=\"%{DATA:poluuid}\" sessionid=%{DATA:sessionid} proto=%{DATA:proto} action=\"%{DATA:action}\" user=\"%{DATA:user}\" authserver=\"%{DATA:authserver}\" policyid=%{DATA:policyid} policytype=\"%{DATA:policytype}\" service=\"%{DATA:service}\" dstcountry=\"%{DATA:dstcountry}\" srccountry=\"%{DATA:srccountry}\" trandisp=\"%{DATA:trandisp}\" transip=%{IPV4:transip} transport=%{DATA:transport} duration=%{DATA:duration} sentbyte=%{DATA:sentbyte} rcvdbyte=%{DATA:rcvdbyte} sentpkt=%{DATA:sentpkt} rcvdpkt=%{DATA:rcvdpkt} appcat=\"%{DATA:appcat} dstdevtype=\"%{DATA:dstdevtype}\" dstdevcategory=\"%{DATA:dstdevcategory}\" masterdstmac=\"%{DATA:masterdstmac}\" dstmac=\"%{DATA:dstmac}\" dstserver=%{WORD:dstserver}",
		  "message","%{SYSLOG5424PRI}date=%{DATA} time=%{TIME:time} devname=\"%{WORD:devname}\" devid=\"%{WORD:devid}\" logid=\"%{WORD:logid}\" type=\"%{WORD:type}\" subtype=\"%{WORD:subtype}\" level=\"%{WORD:level}\" vd=\"%{DATA:vd}\" eventtime=%{WORD:eventtime} srcip=%{IPV4:srcip} srcport=%{DATA:srcport} srcintf=\"%{DATA:srcintf}\" srcintfrole=\"%{DATA:srcintfrole}\" dstip=%{IPV4:dstip} dstport=%{DATA:dstport} dstintf=\"%{DATA:dstintf}\" dstintfrole=\"%{DATA:dstintfrole}\" poluuid=\"%{DATA:poluuid}\" sessionid=%{DATA:sessionid} proto=%{DATA:proto} action=\"%{DATA:action}\" user=\"%{DATA:user}\" authserver=\"%{DATA:authserver}\" policyid=%{DATA:policyid} policytype=\"%{DATA:policytype}\" service=\"%{DATA:service}\" dstcountry=\"%{DATA:dstcountry}\" srccountry=\"%{DATA:srccountry}\" trandisp=\"%{DATA:trandisp}\" transip=%{IPV4:transip} transport=%{DATA:transport} duration=%{DATA:duration} sentbyte=%{DATA:sentbyte} rcvdbyte=%{DATA:rcvdbyte} sentpkt=%{DATA:sentpkt} appcat=\"%{DATA:appcat} dstdevtype=\"%{DATA:dstdevtype}\" dstdevcategory=\"%{DATA:dstdevcategory}\" masterdstmac=\"%{DATA:masterdstmac}\" dstmac=\"%{DATA:dstmac}\" dstserver=%{WORD:dstserver}",
		  "message","%{SYSLOG5424PRI}date=%{DATA} time=%{TIME:time} devname=\"%{WORD:devname}\" devid=\"%{WORD:devid}\" logid=\"%{WORD:logid}\" type=\"%{WORD:type}\" subtype=\"%{WORD:subtype}\" level=\"%{WORD:level}\" vd=\"%{DATA:vd}\" eventtime=%{WORD:eventtime} srcip=%{IPV4:srcip} srcport=%{DATA:srcport} srcintf=\"%{DATA:srcintf}\" srcintfrole=\"%{DATA:srcintfrole}\" dstip=%{IPV4:dstip} dstport=%{DATA:dstport} dstintf=\"%{DATA:dstintf}\" dstintfrole=\"%{DATA:dstintfrole}\" poluuid=\"%{DATA:poluuid}\" sessionid=%{DATA:sessionid} proto=%{DATA:proto} action=\"%{DATA:action}\" user=\"%{DATA:user}\" policyid=%{DATA:policyid} policytype=\"%{DATA:policytype}\" service=\"%{DATA:service}\" dstcountry=\"%{DATA:dstcountry}\" srccountry=\"%{DATA:srccountry}\" trandisp=\"%{DATA:trandisp}\" transip=%{IPV4:transip} transport=%{DATA:transport} duration=%{DATA:duration} sentbyte=%{DATA:sentbyte} rcvdbyte=%{DATA:srcvdbyte} sentpkt=%{DATA:sentpkt} rcvdpkt=%{DATA:rcvdpkt} appcat=\"%{DATA:appcat}\" sentdelta=%{DATA:sentdelta} rcvddelta=%{DATA:rcvddelta} dstdevtype=\"%{DATA:dstdevtype}\" dstdevcategory=\"%{DATA:dstdevcategory}\" masterdstmac=\"%{DATA:masterdstmac}\" dstmac=\"%{DATA:dstmac}\" dstserver=%{WORD:dstserver}",
		  "message","%{SYSLOG5424PRI}date=%{DATA} time=%{TIME:time} devname=\"%{WORD:devname}\" devid=\"%{WORD:devid}\" logid=\"%{WORD:logid}\" type=\"%{WORD:type}\" subtype=\"%{WORD:subtype}\" level=\"%{WORD:level}\" vd=\"%{DATA:vd}\" eventtime=%{WORD:eventtime} srcip=%{IPV4:srcip} srcport=%{DATA:srcport} srcintf=\"%{DATA:srcintf}\" srcintfrole=\"%{DATA:srcintfrole}\" dstip=%{IPV4:dstip} dstport=%{DATA:dstport} dstintf=\"%{DATA:dstintf}\" dstintfrole=\"%{DATA:dstintfrole}\" poluuid=\"%{DATA:poluuid}\" sessionid=%{DATA:sessionid} proto=%{DATA:proto} action=\"%{DATA:action}\" user=\"%{DATA:user}\" policyid=%{DATA:policyid} policytype=\"%{DATA:policytype}\" service=\"%{DATA:service}\" dstcountry=\"%{DATA:dstcountry}\" srccountry=\"%{DATA:srccountry}\" trandisp=\"%{DATA:trandisp}\" transip=%{IPV4:transip} transport=%{DATA:transport} duration=%{DATA:duration} sentbyte=%{DATA:sentbyte} rcvdbyte=%{DATA:srcvdbyte} sentpkt=%{DATA:sentpkt} rcvdpkt=%{DATA:rcvdpkt} appcat=\"%{DATA:appcat}\" dstdevtype=\"%{DATA:dstdevtype}\" dstdevcategory=\"%{DATA:dstdevcategory}\" masterdstmac=\"%{DATA:masterdstmac}\" dstmac=\"%{DATA:dstmac}\" dstserver=%{WORD:dstserver}",
                  "message","\<%{DATA:number}\>date=%{DATA:date} %{GREEDYDATA:other_field} msg=\"%{DATA:msg}\""
		]
      }
      mutate{ 
        add_field => { "log_type" => "sslvpn"}
      }
    }
  if [host] == "10.216.255.1" {
    grok {
	match => { "message" => "%{SYSLOGTIMESTAMP:time} %{DATA:device_name} %{DATA:event_type}\: %{DATA:event_name}\: %{GREEDYDATA:event_msg}" }
    }
    if [event_name] == "UI_LOGIN_EVENT" {
      grok {
        match => { "event_msg" => "(User '%{DATA:user}')( login, class '%{DATA:class}'.*')%{IP:source.ip} %{INT:source.port} %{IP:destination.ip} %{INT:destination.port}(', client-mode '%{GREEDYDATA:client-mode}')"}
      }
      } else if [event_name] == "SNMPD_AUTH_FAILURE" {
        grok {
          match => { "event_msg" => "(.*from %{IP:source.ip} )(to %{IP:destination.ip})"}
        }
      } else if [event_name] == "Alarm set" {
        grok {
          match => { "event_msg" => "(color=%{GREEDYDATA:color},)( class=%{DATA:class},)( reason=%{GREEDYDATA:reason})"}
        }
      } else if [event_name] == "UI_AUTH_EVENT" {
        grok {
          match => { "event_msg" => "(user '%{DATA:user}' .*)('%{DATA:permission_level}')"}
        }
      } else if [event_name] == "SNMP_TRAP_LINK_DOWN" {
        grok {
          match => { "event_msg" => "( %{INT:ifIndex}, .*)( %{DATA:ifAdminStatus}, .*)( %{DATA:ifOperStatus},)( .* %{GREEDYDATA:ifName})"}
        }
      } else if [event_name] == "IPSec negotiation failed with error" {
        grok {
          match => { "event_msg" => "(%{GREEDYDATA:error_reason}. IKE.*)(VPN: %{GREEDYDATA:VPN} .*)(: %{GREEDYDATA:Gateway}, .*)(: %{IP:source.ip}/%{INT:source.port}, )(Remote: %{IP:destination.ip}/%{INT:destination.port})"}
        }
      } else if [event_name] == "IKE negotiation failed with error" {
        grok {
          match => { "event_msg" => "(%{GREEDYDATA:IKE_event_msg}. .* .*)(: %{INT:IKE_Version}, .*)(: %{DATA:VPN} .*)(: %{DATA:Gateway}, .*)(: %{IP:source.ip}/%{INT:source.port}, )(Remote: %{IP:destination.ip}/%{INT:destination.port}, .*)"}
        }
      } else if [event_name] == "IDP_ATTACK_LOG_EVENT" {
        grok {
          match => { "event_msg" => "(%{INT:at_id}, )(%{GREEDYDATA:Attack_type} log)( <%{IP:source.ip}/%{INT:source.port}->%{IP:destination.ip}/%{INT:destination.port}>)( %{DATA:IDP_ATTACK_msg}. )(attack: id=%{INT:attack_id}, .*)(, threat-severity=%{GREEDYDATA:threat-severity}, name=%{DATA:name}, .*)"}
        }
      } else if [event_name] == "KMD_VPN_DOWN_ALARM_USER" {
        grok {
          match => { "event_msg" => "(VPN %{DATA:KMD_VPN_DOWN_msg}. )(Local-ip: %{IP:source_ip}, )(gateway name: %{DATA:gateway_name}, )(vpn name: %{GREEDYDATA:vpn_name}, tunnel.*)(IKE-ID: %{IP:destination_id}, AAA username.*)(Reason: %{GREEDYDATA:Reason}.*)"}
        }
      } else if [event_name] == "error" {
        grok {
          match => { "event_msg" => "PAM: %{DATA:error_reason} for %{DATA:user} from %{IP:source.ip}"}
        }
      } else if [event_name] == "WEB_AUTH_FAIL" {
        grok {
          match => { "event_msg" => "%{GREEDYDATA:failed_reason}( .*username) %{GREEDYDATA:user}[)]"}
        }
      } else if [event_name] == "UI_LOGOUT_EVENT" {
        grok {
          match => { "event_msg" => "User '%{DATA:user}' %{GREEDYDATA:type}"}
        }
      } else if [event_name] == "UI_JUNOSCRIPT_CMD" {
        grok {
          match => { "event_msg" => "User '%{GREEDYDATA:user}' used %{DATA:host_type} to run command '%{DATA:command}'"}
        } 
      } else if [event_name] == "UI_CFG_AUDIT_OTHER" {
        grok {
          match => { "event_msg" => "User '%{DATA:user}' set: \[%{GREEDYDATA:set}\]"}
        }  
      } else if [event_name] == "SSHD_LOGIN_FAILED" {
        grok {
          match => { "event_msg" => ".*user '%{DATA:user}'.*host '%{IP:source.ip}'"}
        } 
      } else if [event_name] == "WEB_AUTH_SUCCESS" {
        grok {
          match => { "event_msg" => ".*username %{DATA:username} from %{IP:source.ip}"}
        }
      }  
      grok {
        match => { "event_msg" => "%{SYSLOGTIMESTAMP:time} %{DATA:device_name} %{DATA:event_type}\:.*for %{DATA:user} from %{IP:source.ip} port %{INT:source.port} %{GREEDYDATA:login_method}"}
      }     

  }
 }
}

output {
  
}

